
import os
from dotenv import load_dotenv
from telebot import types
from typing import List
import telebot

load_dotenv()
TOKEN = os.getenv("TOKEN")
if not TOKEN:
    raise RuntimeError("–¢–æ–∫–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ .env —Ñ–∞–π–ª–µ")
bot = telebot.TeleBot(TOKEN)


def parse_ints_from_text(text: str) -> List[int]:
    """–í—ã–¥–µ–ª—è–µ—Ç –∏–∑ —Ç–µ–∫—Å—Ç–∞ —Ü–µ–ª—ã–µ —á–∏—Å–ª–∞: –Ω–æ—Ä–º–∞–ª–∏–∑—É–µ—Ç –∑–∞–ø—è—Ç—ã–µ, –∏–≥–Ω–æ—Ä–∏—Ä—É–µ—Ç —Ç–æ–∫–µ–Ω—ã-–∫–æ–º–∞–Ω–¥—ã."""
    text = text.replace(",", " ")
    tokens = [tok for tok in text.split() if not tok.startswith("/")]
    return [int(tok) for tok in tokens if is_int_token(tok)]


def is_int_token(t: str) -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–∫–µ–Ω–∞ –Ω–∞ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ (—Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –∑–Ω–∞–∫–∞ –º–∏–Ω—É—Å)."""
    if not t:
        return False
    t = t.strip()
    if t in {"-", ""}:
        return False
    return t.lstrip("-").isdigit()

@bot.message_handler(commands=['hide'])
def hide_kb(m):
 rm = types.ReplyKeyboardRemove()
 bot.send_message(m.chat.id, "—Å–ø—Ä—è—Ç–∞–ª –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É", reply_markup=rm)
 
 
@bot.message_handler(commands=['confirm'])
def confirm_cmd(m):
    kb = types.InlineKeyboardMarkup()
    kb.add(
        types.InlineKeyboardButton("Yes", callback_data="confirm:yes"),
        types.InlineKeyboardButton("No", callback_data="confirm:no"),
        types.InlineKeyboardButton("Cancel", callback_data="confirm:cancel")  # –Ω–æ–≤—ã–π –ø—É–Ω–∫—Ç
    )
    bot.send_message(m.chat.id, "–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –¥–µ–π—Å—Ç–≤–∏–µ?", reply_markup=kb)


@bot.callback_query_handler(func=lambda c: c.data.startswith("confirm"))
def on_confirm(c):
    choice = c.data.split(":", 1)[1]

    bot.answer_callback_query(c.id, "–ü—Ä–∏–Ω—è—Ç–æ")
    bot.edit_message_reply_markup(c.message.chat.id, c.message.message_id, reply_markup=None)

    if choice == "yes":
        bot.send_message(c.message.chat.id, "–ì–æ—Ç–æ–≤–æ ‚úÖ")
    elif choice == "no":
        bot.send_message(c.message.chat.id, "–û—Ç–º–µ–Ω–µ–Ω–æ ‚ùå")
    elif choice == "cancel":
        bot.send_message(c.message.chat.id, "–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º ‚èπ")

   

@bot.message_handler(commands=['start'])
def start(message):
    print(f"[PING] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.username} ({message.chat.id}) –≤—ã–∑–≤–∞–ª /start")
    print(f"[PING] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.username} ({message.chat.id}) –≤—ã–∑–≤–∞–ª /start")
    bot.reply_to(message, "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è —Å–ø—Ä–∞–≤–∫–∏")


@bot.message_handler(commands=['help'])
def help_cmd(message):
    print(f"[PING] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.username} ({message.chat.id}) –≤—ã–∑–≤–∞–ª /help")
    bot.reply_to(message, "/start - –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É\n/help - –ø–æ–º–æ—â—å\n/about - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ\n/sum - —Å—É–º–º–∞ —á–∏—Å–µ–ª\n/hello - –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ")


def make_main_kb() -> types.ReplyKeyboardMarkup:
    kb = types.ReplyKeyboardMarkup(resize_keyboard=True)
    kb.row("O –±–æ—Ç–µ", "–°—É–º–º–∞")
    kb.row("/hello")
    kb.row("/about", "/sum")
    kb.row("/hide", "/show")
    return kb

@bot.message_handler(commands=['show'])
def show_kb(m):
   bot.send_message(m.chat.id, "–ü–æ–∫–∞–∑–∞–ª –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É.", reply_markup=make_main_kb())

@bot.message_handler(commands=['hello'])
def hello(message):
    bot.reply_to(message, "–ü—Ä–∏–≤–µ—Ç! –Ø —Ç–≤–æ–π –±–æ—Ç üòä", reply_markup=make_main_kb())


@bot.message_handler(commands=['about'])
def about(message):
    print(f"[PING] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.username} ({message.chat.id}) –≤—ã–∑–≤–∞–ª /about")
    bot.reply_to(
        message,
        "ü§ñ –ë–æ—Ç: tg-bot-simple\n"
        "–ê–≤—Ç–æ—Ä: Bahara Abdullahi\n"
        "–í–µ—Ä—Å–∏—è: 1.0\n"
        "–ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ: —É—á–µ–±–Ω—ã–π –ø—Ä–æ–µ–∫—Ç"
    )


@bot.message_handler(commands=['ping'])
def ping(message):
    print(f"[PING] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.username} ({message.chat.id}) –≤—ã–∑–≤–∞–ª /ping")
    bot.reply_to(message, "pong üèì")


@bot.message_handler(commands=['sum'])
def cmd_sum(message):
    parts = message.text.split()
    numbers = []

    for p in parts[1:]:
        if p.isdigit():
            numbers.append(int(p))

    if not numbers:
        bot.reply_to(message, "–ù–∞–ø–∏—à–∏ —á–∏—Å–ª–æ: /sum 2 3 10")
    else:
        bot.reply_to(message, f"–°—É–º–º–∞: {sum(numbers)}")
        
@bot.message_handler(commands=['max'])
def cmd_max(message):
    numbers = parse_ints_from_text(message.text)
    if not numbers:
        bot.reply_to(message, "–ü—Ä–∏–º–µ—Ä: /max 2 3 10")
    else:
        bot.reply_to(message, f"–ú–∞–∫—Å–∏–º—É–º: {max(numbers)}")        
        
@bot.message_handler(commands=['weather'])
def weather_cmd(message):
 weather = fetch_weather_moscow_open_meteo()
 bot.reply_to(message, f"{weather}")

def fetch_weather_moscow_open_meteo() -> str:
 url = "https://api.open-meteo.com/v1/forecast"
 params = {
  "latitude": 55.7558,
  "longitude": 37.6173,
  "current": "temperature_2m",
  "timezone": "Europe/Moscow"
 }
 try:
  r = requests.get(url, params=params, timeout=5)
  r.raise_for_status()
  t = r.json()["current"]["temperature_2m"]
  return f"–ú–æ—Å–∫–≤–∞: —Å–µ–π—á–∞—Å {round(t)}¬∞C"
 except Exception:
  return "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø–æ–≥–æ–¥—É."


@bot.message_handler(func=lambda m: m.text == "–û –±–æ—Ç–µ")  # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∞ –æ–ø–µ—á–∞—Ç–∫–∞
def kb_about(m):
    bot.reply_to(m, "–Ø —É—á–µ–±–Ω—ã–π –±–æ—Ç. –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã: /start, /help, /about, /sum, /hello")


@bot.message_handler(func=lambda m: m.text == "–°—É–º–º–∞")
def kb_sum(m: types.Message) -> None:
    bot.send_message(m.chat.id, "–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–∞ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª –∏–ª–∏ –∑–∞–ø—è—Ç—É—é:")
    bot.register_next_step_handler(m, on_sum_numbers)


def on_sum_numbers(m: types.Message) -> None:
    nums = parse_ints_from_text(m.text)
    
    if not nums:
        bot.reply_to(m, "–ù–µ –≤–∏–∂—É —á–∏—Å–µ–ª. –ü—Ä–∏–º–µ—Ä: 2 3 10")
    else:
        bot.reply_to(m, f"–°—É–º–º–∞: {sum(nums)}")


if __name__ == "__main__":
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    bot.infinity_polling(skip_pending=True)
    
    